openapi: '3.0.3'
info:
  version: '0.9.0-oas3'
  title: OIAP
  description: |
    **Open Info API para Puertos**


    This file contains all the APIs developed for the `Open Info API para Puertos` project for the **Environment Domain** within the initiative Ports 4.0 form Puertos del Estado (ES).

    The environment domain covers weather, sea state and pollution. 

  termsOfService: http://swagger.io/terms/
  license:
    name: CC0 1.0 Universal (CC0 1.0)
    url: https://creativecommons.org/publicdomain/zero/1.0/deed.es
  contact:
    name: OpenInfoAPI github
    url: https://github.com/portdebarcelona/OpenInfoAPI-Ports
tags:
  - name: Environment-Weather
    description: "APIs related to the weather in a port."
  # externalDocs:
  #   description: Description 
  #   url: http://swagger.io/ 
  - name: Environment-Sea State
    description: "APIs related to the sea state in the surrounding area of a port."
  - name: Environment-Pollution
    description: "APIs related to the pollution levels in a port area."

servers:
  - url: https://raw.githubusercontent.com/portdebarcelona/OpenInfoAPI-Ports/develop/oasdefinitions
    description: Main server 

paths:
  /realtimeWeather:
    get:
      tags:
        - Environment-Weather
      summary: Returns realtime weather information of the default weather station of a port.
      description: Returns realtime weather information of the default weather station of a port. 
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            oiapApiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  realtimeWeather:
                    $ref: '#/components/schemas/realtimeWeather'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'  

  /weatherForecast:
    get:
      tags:
        - Environment-Weather
      summary: Returns the 5 days weather forecast for a port.
      description: Returns the 5 days weather forecast for a port. 
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            oiapApiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  weatherForecast:
                    type: array
                    items:
                      $ref: '#/components/schemas/weatherForecast'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 

  /astronomicalData:
    get:
      tags:
        - Environment-Weather
      summary: Returns astronomical data from a port. 
      description: Returns astronomical data from a port. Up to date information for sunrise, sunset, moonrise, moonset, moon phase and illumination. 
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            oiapApiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  astronomy:
                    type: array
                    items:
                      $ref: '#/components/schemas/astronomy'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'

  /seaCondition:
    get:
      tags:
        - Environment-Sea State
      summary: Returns information of the sea condition.
      description: Returns information of the sea condition.
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            oiapApiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  seaCondition:
                    $ref: '#/components/schemas/seaCondition'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'

  /wavePrediction:
    get:
      tags:
        - Environment-Sea State
      summary: Returns the prediction of waves.
      description: Returns the prediction of waves, including the component of the wind waves plus the swell.
      parameters:
        - $ref: '#/components/parameters/portCode'
        - $ref: '#/components/parameters/forecastedDate'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            oiapApiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  wavePrediction:
                    type: array
                    items:
                      $ref: '#/components/schemas/wavePrediction'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
                      forecastedDate:
                        $ref: './oiapComponents.yml#/components/schemas/forecastedDate'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'

  /tides:
    get:
      tags:
        - Environment-Sea State
      summary: Returns information about the tides of a port.
      description: Returns information about the tides of a port.
      parameters:
        - $ref: '#/components/parameters/portCode'
        - $ref: '#/components/parameters/forecastedDate'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            oiapApiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  tides:
                    type: array
                    items:
                      $ref: '#/components/schemas/tides'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
                      forecastedDate:
                        $ref: './oiapComponents.yml#/components/schemas/forecastedDate'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'

  /airQualityIndex:
    get:
      tags:
        - Environment-Pollution
      summary: Returns the present value of the Air Quality Index and Level.
      description: Returns the present value of the Air Quality Index and Level.
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            apiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  airQualityIndex:
                    $ref: '#/components/schemas/airQualityIndex'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 

  /airQualityMonitoring:
    get:
      tags:
        - Environment-Pollution
      summary: Returns some common air quality parameters.
      description: Returns some common air quality parameters.
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            apiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  airQualityPollution:
                    $ref: '#/components/schemas/airQualityPollution'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 

  /waterQualityIndex:
    get:
      tags:
        - Environment-Pollution
      summary: Returns the present value of the Water Quality Index and Level.
      description: > 
            Returns the present value of the Water Quality Index and Level.
            
            WQI provides a single number that expresses the overall water quality, at a certain location and time, based on several water quality parameters. The objective of WQI is to turn complex water quality data into information that is understandable and usable by the public.
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            apiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  waterQualityIndex:
                    type: array
                    items:
                      $ref: '#/components/schemas/waterQualityIndex'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 

  /waterQualityMonitoring:
    get:
      tags:
        - Environment-Pollution
      summary: Returns some common water quality parameters.
      description: Returns some common water quality parameters.
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            apiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  waterQualityParameters:
                    $ref: '#/components/schemas/waterQualityParameters'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 

  /noiseLevel: 
    get:
      tags:
        - Environment-Pollution
      summary: Returns the level of noise of a port
      description: Returns the level of noise of a port
      parameters:
        - $ref: '#/components/parameters/portCode'
      responses: #status code
        '200':
          description: Successful operation
          headers:
            apiVersion:
              $ref: './oiapComponents.yml#/components/headers/oiapApiVersion'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  noiseLevel:
                    $ref: '#/components/schemas/noiseLevel'
                  metadata: 
                    $ref: './oiapComponents.yml#/components/schemas/metadata'
                  requestedParams:
                    type: object
                    properties:
                      portCode:
                        $ref: './oiapComponents.yml#/components/schemas/portCode'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error'  
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: './oiapComponents.yml#/components/schemas/error' 



components:
  parameters: 
    portCode:
      in: query
      name: portCode
      description: |
            Port UN/LOCODE
            Default value is Locode of Port what provides the services
            example: portCode=ESBCN        
      required: false
      style: form
      explode: false
      schema:
        $ref: './oiapComponents.yml#/components/schemas/portCode'

    forecastedDate:
      in: query
      name: forecastedDate
      description: Date of the forecast.     
      required: false
      style: form
      explode: false
      schema:
        $ref: './oiapComponents.yml#/components/schemas/forecastedDate'

  schemas:
    realtimeWeather: 
      description: 'Realtime weather information.'
      type: object
      allOf:
        - type: object 
          properties:
              dataProvider: 
                description: Specifies the URL to information about the provider of this information
                type: string
              dateModified: 
                description: Last update timestamp of this entity. Automatically generated.
                type: string
                format: date-time
              dateCreated: 
                description: Entity's creation timestamp. Automatically generated.
                type: string
                format: date-time
              name: 
                description: Name given to the weather observed location.
                type: string
              location: 
                description: Location of the weather observation represented by a GeoJSON geometry. https://tools.ietf.org/html/rfc7946. Mandatory if address is not defined.
                type: string             
              address: 
                description: Civic address of the weather observation. Sometimes it corresponds to a weather station address. https://schema.org/address. Mandatory if location is not present.
                type: string 
              dateObserved: 
                description: The date and time of this observation in ISO8601 UTCformat. It can be represented by an specific time instant or by an ISO8601 interval.
                type: string
                format: date-time
              source: 
                description: A sequence of characters giving the source of the entity data.
                type: string
              refDevice: 
                description: A reference to the device(s) which captured this observation.
                type: string
              refPointOfInterest: 
                description: A reference to a point of interest (usually a weather station) associated to this observation.
                type: string
              weatherTypes: 
                description: The observed weather types. It is represented by a comma separated list of weather statuses, for instance overcast, lightRain.
                type: array
                items:
                      $ref: './oiapComponents.yml#/components/schemas/weatherType'
              dewPoint: 
                description: The dew point encoded as a number. Default unit is Celsius degrees. See also https://en.wikipedia.org/wiki/Dew_point
                type: number
              visibility: 
                description: Visibility reported.
                type: string
                enum: [veryPoor, poor, moderate, good, veryGood, excellent]
                example: good
              temperature: 
                description: Air's temperature observed. Default unit is degrees centigrades.
                type: number
              feelsLikeTemperature:  
                description: Wind chill/Feels like Temperature (°C)
                type: number
              relativeHumidity: 
                description: Air's relative humidity observed (percentage, expressed in parts per one).
                type: number
                minimum: 0
                maximum: 1
                example: 0.4            
              precipitation: 
                description: Precipitation level observed. Default unit is liters per square meter.
                type: number
              windDirection: 
                description: The wind direction expressed in decimal degrees compared to geographic North (measured clockwise), encoded as a Number. Range 0 to 360.
                type: number
                minimum: 0
                maximum: 360
                example: 135  
              windSpeed: 
                description: The observed wind speed in m/s.
                type: number
              atmosphericPressure: 
                description: The atmospheric pressure observed measured in Hecto Pascals.
                type: number
              pressureTendency: 
                description: Is the pressure rising or falling. It can be expressed in quantitative terms or qualitative terms.
                type: string
                enum: [raising, falling, steady]
                example: steady
              solarRadiation: 
                description: The solar radiation observed measured in Watts per square meter.
                type: number 
              illuminance: 
                description: The illumninance observed measured in lux (lx) or lumens per square metre (cd·sr·m-2).
                type: number
                example: 1000
      required:
        - dateObserved 

    weatherForecast: 
      description: 'Weather forecast information.'
      type: object
      allOf:
        - type: object 
          properties:        
            forecastedDate:  
              description: Date of the forecast.      
              type: string 
              format: date
            atmosphericPressure:    
              description: 'The atmospheric pressure observed measured in Hecto Pascals'        
              type: number 
              minimum: 0
            dayMaximum:    
              description: 'Maximum values for the reported period. Subattributes:- `temperature` : Maximum temperature. See `WeatherForecast.temperature` for description and units. - `feelLikesTemperature`. Maximum feels like temperature. Same semantics and units as `WeatherForecast.feelsLikeTemperature`.-   `relativeHumidity`. Maximum relative humidity. Same semantics and units as `WeatherForecast.relativeHumidity`.'    
              type: object  
              properties:    
                feelLikesTemperature:    
                  description: 'Property. Temperature appreciation of the item'    
                  type: number    
                relativeHumidity:    
                  description: 'Property. Humidity in the Air. Observed instantaneous relative humidity (water vapour in air)'    
                  type: number
                  maximum: 1    
                  minimum: 0      
                temperature:    
                  description: 'Property. Temperature of the item'    
                  type: number      
            dayMinimum:    
              description: 'Minimum values forecasted for the reported period.  Minimum values for the reported period. Subattributes:- `temperature` : Minimum temperature. See `WeatherForecast.temperature` for description and units. - `feelLikesTemperature`. Minimum feels like temperature. Same semantics and units as `WeatherForecast.feelsLikeTemperature`.- `relativeHumidity`. Minimum relative humidity. Same semantics and units as `WeatherForecast.relativeHumidity`'    
              type: object   
              properties:    
                feelLikesTemperature:    
                  description: 'Property. Temperature appreciation of the item'    
                  type: number    
                relativeHumidity:    
                  description: 'Property. Humidity in the Air. Observed instantaneous relative humidity (water vapour in air)'    
                  maximum: 1    
                  minimum: 0    
                  type: number    
                temperature:    
                  description: 'Property. Temperature of the item'    
                  type: number              
            gustSpeed:    
              description: 'A sudden burst of high-speed wind over the observed average wind speed lasting only for a few seconds.'    
              type: number
            precipitationProbability:
              description: Rain precipitation probability (%)
              type: number
              minimum: 0
              maximum: 1
            cloudCover:  
              description: Cloud cover in percentage (%)
              type: number
              minimum: 0
              maximum: 1
            dataProvider:    
              description: 'A sequence of characters identifying the provider of the harmonised data entity.'    
              type: string      
            metadata:
              $ref: './oiapComponents.yml#/components/schemas/metadata'
      required:
        - targetData 

    astronomy:  
      description: 'Astronomical data.'
      type: object
      allOf:
        - type: object 
          properties:
            sunrise:  
              description: 'Sunrise hour.'
              type: string
              format: date-time
            sunset:  
              description: 'Sunset hour.'
              type: string
              format: date-time
            moonrise:  
              description: 'Moonrise hour.'
              type: string
              format: date-time
            moonset:  
              description: 'Moonrise hour.'
              type: string
              format: date-time
            moonPhase:  
              description: 'Moon phase.'
              type: string
              enum: [New Moon, First Quarter, Full Moon, Last Quarter]
              example: Full Moon
            illumination:  
              description: 'Moon percentage illumination.'
              type: integer
              minimum: 0
              maximum: 100
              example: 90     

    seaCondition: 
      description: 'Sea condition.'
      type: object
      allOf:
        - type: object 
          properties:
            lastCheckedResult:  
              $ref: './oiapComponents.yml#/components/schemas/lastCheckedResult'
            surfaceTemperature: 
              description: Sea surface temperature, expressed in Celsius degrees.
              type: number
              example: 18.5
            waveHeight: 
              description: Height of the waves, expressed in meters.
              type: number
              example: 1.2
            waveLevel: 
              description: It indicates the height of the waves and also measures the swell of the sea, expressed in meters.
              type: number
              example: 1.7
            wavePeriod: 
              description: Indicates the time between the crests of a wave, expressed in seconds.'
              type: number
              example: 12
            source: 
              description: A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.
              $ref: './oiapComponents.yml#/components/schemas/uri'
      required:
        - lastCheckedResult 

    wavePrediction: 
      description: Wave prediction.       
      type: object
      allOf:
        - type: object 
          properties:
            forecastedDate:  
              description: Date of the forecast.
              type: string
              format: date
            waveHeight:
              description: Significant wave height in (meter)
              type: number
            swellHeight:  
              description: Swell height in (meter)
              type: number
            swellPeriod:  
              description: Swell period in (secs)
              type: integer
            swellDirection:              
              description: Swell direction
              type: integer
              minimum: 0
              maximum: 360
            windDirection: 
              description: The wind direction expressed in decimal degrees compared to geographic North (measured clockwise), encoded as a Number. Range 0 to 360.
              type: number
              minimum: 0
              maximum: 360
              example: 135  
            windSpeed: 
              description: The observed wind speed in m/s.
              type: number
            metadata: 
              $ref: './oiapComponents.yml#/components/schemas/metadata'
      required:
        - forecastedData 
        - waveHeight

    tides: 
      description: 'Tidal information.'
      type: object
      properties:
        forecastedDate:  
          description: Date for which the tides are forecasted
        highTide:  
          description: >
              The maximum height reached by a rising tide.  High tide is measured in meters.
          type: object
          properties:
            height:
              $ref: './oiapComponents.yml#/components/schemas/height'
            time: 
              $ref: './oiapComponents.yml#/components/schemas/time' 
        lowTide:  
          description: >
              The minimum height reached by a falling tide.  Low tide is measured in meters.
          type: object
          properties:
            height:
              $ref: './oiapComponents.yml#/components/schemas/height'
            time: 
              $ref: './oiapComponents.yml#/components/schemas/time' 
      required:
        - forecastedDates 

    airQualityIndex: 
      description: 'Air Quality Index.'
      type: object
      allOf:
        - type: object 
          properties:
            lastCheckedResult:  
              $ref: './oiapComponents.yml#/components/schemas/lastCheckedResult' 
            airQualityIndex:  
              description: 'Value of the Air Quality Index (AQI).'
              type: integer
              minimum: 0
              maximum: 100
              example: 65
            airQualityLevel:  
              description: 'Air Quality Level. Example values are those defined by the USA EPA Agency: (good, moderate, unhealthyForSensitiveGroups, unhealthy, veryUnhealthy, hazardous).'
              type: string
              enum: [good, moderate, unhealthyForSensitiveGroups, unhealthy, veryUnhealthy, hazardous]
              example: moderate 

    airQualityPollution: 
      description: 'Values of several parameters that measure the air quality.'
      type: object
      allOf:
        - type: object 
          properties:
            lastCheckedResult:  
              $ref: './oiapComponents.yml#/components/schemas/lastCheckedResult' 
            airQualityIndex:  
              description: 'Value of the Air Quality Index (AQI).'
              type: integer
              example: 65
            CO:  
              description: 'CO concentration, in milligrams per cubic meter.'
              type: integer
              example: 500 
            NO:  
              description: 'NO concentration, in milligrams per cubic meter.'
              type: integer
              example: 43
            NO2:  
              description: 'NO2 concentration, in milligrams per cubic meter.'
              type: integer
              example: 70
            NOx:  
              description: 'NOx concentration, in milligrams per cubic meter.'
              type: integer
              example: 490
            SO2:  
              description: 'SO2 concentration, in milligrams per cubic meter.'
              type: integer
              example: 12
      required:
        - lastCheckedResult
        - airQualityIndex

    waterQualityIndex: 
      description: 'Water Quality Index.'
      type: object
      allOf:
        - type: object 
          properties:
            lastCheckedResult:  
              $ref: './oiapComponents.yml#/components/schemas/lastCheckedResult' 
            waterQualityIndex:  
              description: 'Value of the Water Quality Index (WQI).'
              type: integer
              minimum: 0
              maximum: 100
              example: 83
            waterQualityLevel:  
              description: 'Water Quality Level. Example values are excellent quality, good, average, bad.'
              type: string
              enum: [excellent quality, good, average, bad]
              example: moderate
      required:
        - lastCheckedResult
        - waterQualityIndex

    waterQualityParameters: 
      description: 'Water quality parameters and chemical agents.'
      type: object
      allOf:
        - type: object 
          properties:
            lastCheckedResult:  
              $ref: './oiapComponents.yml#/components/schemas/lastCheckedResult' 
            waterTemperature:  
              description: 'Water temperature, expressed in Celsius degrees.'
              type: number
              example: 22.5
            salinity: 
              description: Amount of salts dissolved in water, measured in parts per thousand (ppt).
              type: number
              example: 22.15
            pH: 
              description: Acidity or basicity of an aqueous solution, expressed as the negative of the logarithm to base 10 of the activity of the hydrogen ion. 
              type: number
              example: 7.5
            turbidity: 
              description: Amount of light scattered by particles in the water column, measured in Formazin Turbidity Units (FTU).
              type: number
              example: 18.15
            O2: 
              description: Level of free, non-compound oxygen present, expressed in milligrams per liter (mg/L).
              type: number
              example: 4.12
            tss: 
              description: Total suspended solids, measured in milligrams per liter (mg/L).
              type: number
              example: 123
            tds: 
              description: Total dissolved solids, measured in milligrams per liter (mg/L).
              type: number
              example: 100
            nitrates: 
              description: Concentration of nitrates, expressed in milligrams per liter (mg/L).
              type: number
              example: 0.01
            nitrites: 
              description: Concentration of nitrites, expressed in milligrams per liter (mg/L).
              type: number
              example: 0.972
            ammonia: 
              description: Concentration of ammonia, expressed in milligrams per liter (mg/L).
              type: number
              example: 0.996             
            silicate: 
              description: Concentration of silicate, expressed in milligrams per liter (mg/L).
              type: number
              example: 0.994
            phosphate: 
              description: Concentration of phosphate, expressed in milligrams per liter (mg/L).
              type: number              
              example: 0.996
      required:
        - lastCheckedResult

    noiseLevel: 
      description: 'Noise level, expressed in dB.'
      type: object
      allOf:
        - type: object 
          properties:
            lastCheckedResult:  
              $ref: './oiapComponents.yml#/components/schemas/lastCheckedResult'
            noiseLevel:
              type: integer
              minimum: 0
              maximum: 140
              example: 65
      required:
        - lastCheckedResult
        - noiseLevel